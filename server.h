void send_identity(int connection);
int get_servers(char *hostname, int port, int add_slots, host_list *server_list);
void listen_for_connection(int *listener);
void handle_rpc(int connection);
void send_update(int connection);
void distribute_update();
void listener_set_up();
void print_server_list();

void rpc_serve_job();
void rpc_send_servers(int connection);
void rpc_request_job(int connection); 
void rpc_inform_of_completion(int connection);
void rpc_receive_update(int connection);
void rpc_add_job(int connection);
void rpc_receive_update(int connection);
void rpc_receive_job_copy(int connection);

int verify_update(host_list* new, host_list* old);
void failure_notify(host_port *fail);
void update_q_job_complete (int jobid, queue *Q);
int contains(job *current, int jobid);
job *create_job(int num_files, char files[MAX_ARGUMENTS][MAX_ARGUMENT_LEN], int *flags);
void remove_dependency(job *current, int jobid);
void check_avail(job *current);
void replicate(job *rep_job);
void copy_job(host_port *hip, job *cop_job);
void selectHost(job *copy_job);
void add_replica(host_port *host, job *rep_job);
void add_to_queue(job *addJob, queue *Q);
void add_job(job *addJob);
void update_q_host_failed (host_port* failed_host, queue *Q);
void handle_host_failure(int connection);
void replace_host_in_replica_list(host_port* failed_host, job* job);
void clone_host_list(host_list *old_list, host_list *new_list);
void get_hostport_from_connection(int connection, host_port *result);
void add_to_host_list(host_port *added_host_port, host_list *list);
host_list *new_host_list();
void remove_from_host_list(host_port *removed_host_port, host_list *list);
